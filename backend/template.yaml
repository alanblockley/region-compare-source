AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  SAM Template for backend of region compare

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    MemorySize: 160
    Runtime: python3.11
    Handler: app.lambda_handler
    Architectures:
      - arm64
    Layers:
      - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:bedrock-layer:1"
    Environment:
      Variables:
        DEBUG: true
  Api:
    Cors:
      AllowMethods: '''POST, GET'''
      AllowHeaders: '''*'''
      AllowOrigin: '''*'''

Parameters:
  ServicesJsonUrl:
    Type: String
    Description: URL to the JSON file containing the services data
    Default: https://api.regional-table.region-services.aws.a2z.com/index.json

  SNSTopic:
    Type: String
    Description: SNS topic to publish notifications to
    Default: dbla-dev-sns-topic
  
  AlertsSNSTopic:
    Type: String
    Description: SNS topic to publish notifications to
    Default: dbla-dev-alerts

  Hostname:
    Type: String
    Description: Hostname
    Default: region-compare.domainname.com

  ZoneId:
    Type: String
    Description: Route53 zone ID
    Default: Z07368EXAMPLE3FAQR6S

  GlobalACMCert:
    Type: String
    Description: Global ACM certificate ARN
    Default: arn:aws:acm:us-east-1:179EXAMPLE59:certificate/fd0d43f9-bf35-4f33-8fa4-95example68e
  
  CachePolicyId:
    Type: String
    Description: Cache policy ID
    Default: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"

  PushedAppKeyValue:
    Type: String
    Description: App key for pushed.co app
    Default: ""

  PushedAppSecretValue:
    Type: String
    Description: Secret for pushing services announcements to pushed.co
    Default: ""

Resources:
      
  GetLLMListFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_llm_list/
      Environment:
        Variables:
          JSON_URL: !Ref ServicesJsonUrl
          REGION_DATA_TABLE: !Ref RegionDataTable
          CURRENT_SERVICES_BUCKET: !Ref DataBucket
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref RegionDataTable
        - Statement:
            - Sid: Bedrock
              Effect: Allow
              Action:
                - bedrock:*
              Resource: '*'
      Events:
        GetLLMList:
          Type: Api
          Properties:
            Path: /llm-list
            Method: get
    
  GetVersionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_version/
      Environment:
        Variables:
          CURRENT_VERSION_PARAMETER: !Ref CurrentVersionParameter
          CURRENT_SERVICES_BUCKET: !Ref DataBucket
      Policies:
        - Statement:
            - Sid: SSMParameterReadPolicy
              Effect: Allow
              Action:
                - ssm:GetParameter
              Resource: '*'
      Events:
        GetVersion:
          Type: Api
          Properties:
            Path: /version
            Method: get

  GetRegionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_regions/
      Environment:
        Variables:
          REGION_DATA_TABLE: !Ref RegionDataTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref RegionDataTable
        - Statement:
            - Sid: account
              Effect: Allow
              Action:
                - account:ListRegions
              Resource: '*'
      Events:
        GetRegions:
          Type: Api
          Properties:
            Path: /regions
            Method: get

  GetNewsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_news/
      Environment:
        Variables:
          SERVICE_NEWS_TABLE: !Ref ServiceNewsTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ServiceNewsTable
      Events:
        GetNews:
          Type: Api
          Properties:
            Path: /news
            Method: get

  GetServicesByRegionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_services_by_region/
      Environment:
        Variables:
          CURRENT_VERSION_PARAMETER: !Ref CurrentVersionParameter
          CURRENT_SERVICES_BUCKET: !Ref DataBucket
          JSON_URL: !Ref ServicesJsonUrl
      Policies:
        - Statement:
            - Sid: SSMParameterReadPolicy
              Effect: Allow
              Action:
                - ssm:GetParameter
              Resource: '*'
        - S3ReadPolicy:
            BucketName: !Ref Bucket
      Events:
        GetServicesByRegion:
          Type: Api
          Properties:
            Path: /services/{region}
            Method: get

  IngestServicesDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ingest_services_data/
      Environment:
        Variables:
          CURRENT_VERSION_PARAMETER: !Ref CurrentVersionParameter
          PREVIOUS_VERSION_PARAMETER: !Ref PreviousVersionParameter
          CURRENT_SERVICES_BUCKET: !Ref DataBucket
          JSON_URL: !Ref ServicesJsonUrl
          SNS_TOPIC: !Ref SNSTopic
          SQS_QUEUE: !Ref GenerateServiceNewsQueue
          PUSHED_APP_SECRET: !Ref PushedAppSecret
      Policies:
        - Statement:
          - Sid: SSMParameterReadPolicy
            Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:PutParameter
            Resource: "*"
        - S3FullAccessPolicy:
            BucketName: !Ref Bucket
        - S3FullAccessPolicy:
            BucketName: !Ref DataBucket
        - SQSSendMessagePolicy:
            QueueName: !GetAtt GenerateServiceNewsQueue.QueueName
        - SNSPublishMessagePolicy:
            TopicName: !Ref SNSTopic
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref PushedAppSecret
      Events:
        ScheduleDaily:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: rate(5 minute)

  IngestLLMFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ingest_llm/
      Environment:
        Variables:
          JSON_URL: !Ref ServicesJsonUrl
          REGION_DATA_TABLE: !Ref RegionDataTable
          CURRENT_MD5_PARAMETER: !Ref CurrentModelsMD5Parameter
          CURRENT_VERSION_PARAMETER: !Ref CurrentModelsVersionParameter
          PREVIOUS_VERSION_PARAMETER: !Ref PreviousModelsVersionParameter
          CURRENT_SERVICES_BUCKET: !Ref DataBucket
          SNS_TOPIC: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopic}
          SQS_QUEUE: !Ref GenerateServiceNewsQueue
          PUSHED_APP_SECRET: !Ref PushedAppSecret
      Policies:
        - Statement:
            - Sid: SSMParameterReadPolicy
              Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:PutParameter
              Resource: '*'
        - SNSPublishMessagePolicy:
            TopicName: !Ref SNSTopic
        - S3FullAccessPolicy:
            BucketName: !Ref DataBucket
        - DynamoDBReadPolicy:
            TableName: !Ref RegionDataTable
        - Statement:
            - Sid: Bedrock
              Effect: Allow
              Action:
                - bedrock:*
              Resource: '*'
      Events:
        ScheduleDaily:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: rate(5 minute)

  GenerateServiceNewsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: generate_service_news/
      Environment:
        Variables:
          CURRENT_VERSION_PARAMETER: !Ref CurrentModelsVersionParameter
          PREVIOUS_VERSION_PARAMETER: !Ref PreviousModelsVersionParameter
          CURRENT_SERVICES_BUCKET: !Ref DataBucket
          SERVICE_NEWS_TABLE: !Ref ServiceNewsTable
          JSON_URL: !Ref ServicesJsonUrl
          SNS_TOPIC: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopic}
          GENERATE_RSS_FEED_FUNCTION: !Ref GenerateRSSFeedFunction
      Policies:
        - Statement:
          - Sid: SSMParameterReadPolicy
            Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:PutParameter
            Resource: "*"
          - Sid: Bedrock
            Effect: Allow
            Action:
              - bedrock:InvokeModel
            Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/*"
        - S3FullAccessPolicy:
            BucketName: !Ref Bucket
        - DynamoDBWritePolicy:
            TableName: !Ref ServiceNewsTable
        - LambdaInvokePolicy:
            FunctionName: !Ref GenerateRSSFeedFunction
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt GenerateServiceNewsQueue.Arn
            BatchSize: 10

  # Not in production yet - slightly buggy ! 
  GenerateRSSFeedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: generate_rss_feed/
      Environment:
        Variables:
          REGION_DATA_TABLE: !Ref RegionDataTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref RegionDataTable

  GenerateServiceNewsQueue:
    Type: AWS::SQS::Queue

  ServiceNewsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
  
  RegionDataTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
        
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      BucketEncryption:
          ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
          -
            Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                -
                  - "arn:aws:s3:::"
                  -
                    Ref: Bucket
                  - "/*"
            Principal:
              CanonicalUser: !GetAtt Originaccessidentity.S3CanonicalUserId

  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      BucketEncryption:
          ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  DataBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DataBucket
      PolicyDocument:
        Statement:
          -
            Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                -
                  - "arn:aws:s3:::"
                  -
                    Ref: DataBucket
                  - "/*"
            Principal:
              CanonicalUser: !GetAtt DataBucketOriginaccessidentity.S3CanonicalUserId
  
  Originaccessidentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "frontend originaccessidentity"

  DataBucketOriginaccessidentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "data originaccessidentity"

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: 
          - !Ref Hostname
        ViewerCertificate: 
          AcmCertificateArn: !Ref GlobalACMCert
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Enabled: true
        Comment: distribution
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 400
            ResponseCode: 200
            ResponsePagePath: "/error.html"
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: "/error.html"

        Origins:
        - Id: Bucket
          DomainName: !Sub ${Bucket}.s3.${AWS::Region}.amazonaws.com
          S3OriginConfig:
            OriginAccessIdentity: !Join [ "", [ "origin-access-identity/cloudfront/", !Ref Originaccessidentity ] ]

        - Id: DataBucket
          DomainName: !Sub ${DataBucket}.s3.${AWS::Region}.amazonaws.com
          S3OriginConfig:
            OriginAccessIdentity: !Join [ "", [ "origin-access-identity/cloudfront/", !Ref DataBucketOriginaccessidentity ] ]

        DefaultCacheBehavior:
          TargetOriginId: Bucket
          ViewerProtocolPolicy: redirect-to-https
          Compress: false
          CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
          ResponseHeadersPolicyId: "5cc3b908-e619-4b99-88e5-2cf7f45965bd"
          OriginRequestPolicyId: "88a5eaf4-2fd4-4709-b370-b4c650ea3fcf"
        
        CacheBehaviors:
        - TargetOriginId: DataBucket
          ViewerProtocolPolicy: redirect-to-https
          Compress: false
          CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
          ResponseHeadersPolicyId: "5cc3b908-e619-4b99-88e5-2cf7f45965bd"
          OriginRequestPolicyId: "88a5eaf4-2fd4-4709-b370-b4c650ea3fcf"
          PathPattern: data/*

  # Parameter to store the current version of the file
  CurrentVersionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /regional-services/current_version
      Type: String
      Value: "1"

  # Parameter to store the previous version of the file
  PreviousVersionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /regional-services/previous_version
      Type: String
      Value: "1"

  CurrentModelsVersionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /regional-services/current_models_version
      Type: String
      Value: '1'

  PreviousModelsVersionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /regional-services/previous_models_version
      Type: String
      Value: '1'

  CurrentModelsMD5Parameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /regional-services/current_models_md5
      Type: String
      Value: '1'

  PushedAppSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Pushed API Key
      SecretString: !Join
        - ''
        - - '{"PUSHED_APP_KEY":"'
          - !Ref PushedAppKeyValue
          - '", "PUSHED_APP_SECRET":"'
          - !Ref PushedAppSecretValue
          - '"}'

  DNSEntry:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref ZoneId
      Comment: !Sub "Record for Region Compare"
      RecordSets:
        - Name: !Ref Hostname
          Type: A
          AliasTarget:
            DNSName: !GetAtt 
              - Distribution
              - DomainName
            HostedZoneId: Z2FDTNDATAQYW2